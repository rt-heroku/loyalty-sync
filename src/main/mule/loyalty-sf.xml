<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:salesforce="http://www.mulesoft.org/schema/mule/salesforce"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/salesforce http://www.mulesoft.org/schema/mule/salesforce/current/mule-salesforce.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<flow name="loyalty-get-by-contact" doc:id="311a72ae-5bba-4078-9e60-2bb3af2f598a" >
		<http:listener doc:name="Listener" doc:id="89681338-1d12-43bd-9a6f-2c9d557a3ac6" config-ref="HTTP_Listener_config" path="/cases" />
		<salesforce:query-all doc:name="Query all" doc:id="c559a6a8-31c6-4d6b-a8bf-1c41d57e2dbf" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[SELECT Amount__c,ContactId, Contact.name, Contact.email, Contact.phone , 
Description, Discount, EndDate, External_ID__c,GrandTotal, Status, Subject, Subtotal, Tax, Work_End__c, 
WorkOrderNumber, Work_Order_Type__c, Work_Start__c, 
WorkTypeId, WorkType.Description, WorkType.DurationType, WorkType.Type__c, WorkType.Name,
WorkType.ProductId, WorkType.Product.Description
FROM WorkOrder
]]></salesforce:salesforce-query>
		</salesforce:query-all>
		<ee:transform doc:name="Transform Message" doc:id="cb8342ea-488b-4213-a0d1-69de49f290a9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="loyalty-get-member-tier" doc:id="22c3e01c-599a-4f12-acd8-827447db16db" >
		<http:listener doc:name="Listener" doc:id="1ad14383-0795-47da-ac40-b55b0638937e" config-ref="HTTP_Listener_config" path="/members/tiers/{id}" />
		<salesforce:query doc:name="Query Tier by Member Id" doc:id="14169f07-f3f5-45ea-af09-5051e797d5c3" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[SELECT LoyaltyMemberId, id, Name, External_ID__c, TierMemberIdentifier
From LoyaltyMemberTier 
Where LoyaltyMemberId = ':id']]></salesforce:salesforce-query>
			<salesforce:parameters ><![CDATA[#[output application/java
---
{
	"id" : attributes.uriParams.id
}]]]></salesforce:parameters>
		</salesforce:query>
		<ee:transform doc:name="Transform Message" doc:id="d7f647f7-6453-4841-91ad-4febdd0386f3" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload[0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="loyalty-get-points" doc:id="eb5853b3-e3d0-4e4b-ba79-a4d10aaca7e1" >
		<http:listener doc:name="Listener" doc:id="c89565bf-3300-43ac-abe7-238f89723eb9" config-ref="HTTP_Listener_config" path="/members/points/{id}" />
		<salesforce:query-all doc:name="Query Points by Member Id" doc:id="71dc19cb-ea19-4d9b-88d5-06438740daf9" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[SELECT LoyaltyMemberId, sum(PointsBalance) PointsBalance, sum(EscrowPointsBalance) EscrowPointsBalance , sum(ExpirablePoints) ExpirablePoints, 
sum(TotalPointsAccrued) TotalPointsAccrued, sum(TotalPointsExpired) TotalPointsExpired, sum(TotalPointsRedeemed) TotalPointsRedeemed
FROM LoyaltyMemberCurrency
WHERE LoyaltyMemberId = ':id'
group by LoyaltyMemberId
]]></salesforce:salesforce-query>
			<salesforce:parameters ><![CDATA[#[output application/java
---
{
	"id" : attributes.uriParams.id
}]]]></salesforce:parameters>
		</salesforce:query-all>
		<ee:transform doc:name="Transform Message" doc:id="e4620546-590d-49a6-9231-8222c8e58dd2" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload[0]]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="loyalty-get-programs" doc:id="d29cf482-79d9-4d98-8b95-23cc58c58dce" >
		<http:listener doc:name="Listener" doc:id="27c63114-7a3a-4cc6-aae3-bc3d0102ad68" config-ref="HTTP_Listener_config" path="/programs" />
		<salesforce:query-all doc:name="Query all" doc:id="2a5d3f87-003c-420f-906d-eaed7be47f41" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[select id, name from loyaltyprogram]]></salesforce:salesforce-query>
		</salesforce:query-all>
		<ee:transform doc:name="Transform Message" doc:id="96f221b2-b2e5-4df2-b585-27400d2b5f89" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="loyalty-get-all-journaltypes" doc:id="bc6bcf20-d0b8-4afb-b1e5-aae75e71d193" >
		<http:listener doc:name="Listener" doc:id="f28163a0-9aa8-4930-9df7-0b6cce7f1536" config-ref="HTTP_Listener_config" path="/journaltypes" />
		<salesforce:query-all doc:name="Query all" doc:id="e8eb7b62-20d3-44d9-81a4-94775a669558" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[select id, name, journaltype.id, journaltype.name, journaltype.description, description from journalsubtype]]></salesforce:salesforce-query>
		</salesforce:query-all>
		<ee:transform doc:name="Transform Message" doc:id="e29f7bfc-3ded-4646-a5e6-442cd2611575" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
// payload = the input JSON array

var grouped = payload groupBy ((item) -> item.JournalType.Id)

---
grouped
    pluck ((items, key) -> {
        JournalType: items[0].JournalType,
        JournalSubTypes: 
            (items 
              // drop the nested JournalType from each child
              map (it) -> it - "JournalType"
            )
            // just in case: remove dups by Id
            distinctBy ((s) -> s.Id)
    })
    // optional: stable ordering by JournalType name
    // orderBy ((o) -> o.JournalType.Name)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="loyalty-get-wo" doc:id="77674573-833e-44f9-aaa3-d884f87890e4" >
		<http:listener doc:name="Listener" doc:id="7996b7c5-afe3-4f18-9dec-476780fbfc19" config-ref="HTTP_Listener_config" path="/wo" />
		<salesforce:query-all doc:name="Query all" doc:id="29d70a1c-bc91-4412-8e88-200d3f606a92" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[SELECT Amount__c,ContactId, Contact.name, Contact.email, Contact.phone , 
Description, Discount, EndDate, External_ID__c,GrandTotal, Status, Subject, Subtotal, Tax, Work_End__c, 
WorkOrderNumber, Work_Order_Type__c, Work_Start__c, 
WorkTypeId, WorkType.Description, WorkType.DurationType, WorkType.Type__c, WorkType.Name,
WorkType.ProductId, WorkType.Product.Description
FROM WorkOrder
]]></salesforce:salesforce-query>
		</salesforce:query-all>
		<ee:transform doc:name="Transform Message" doc:id="6a48f965-bd67-4936-84fe-42016e606b2c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="loyalty-get-member-tiers" doc:id="44ce114d-beaf-4438-b3e7-22ef25e9a063" >
		<http:listener doc:name="Listener" doc:id="4eb3d331-06b6-4cb7-9f6c-92c0fa4c78c4" config-ref="HTTP_Listener_config" path="/members/tiers" />
		<salesforce:query-all doc:name="Query all" doc:id="cd1b0065-8e13-4224-b7f3-0481c08e1a7e" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[SELECT LoyaltyMemberId, id, Name, External_ID__c, TierMemberIdentifier
From LoyaltyMemberTier 
]]></salesforce:salesforce-query>
		</salesforce:query-all>
		<ee:transform doc:name="Transform Message" doc:id="3d6c8d5d-3835-4f1d-b7f6-c74b7df27ac9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="loyalty-get-member-transactions" doc:id="a0db846f-79f1-427a-9d8c-2298acec8c07" >
		<http:listener doc:name="Listener" doc:id="868d890e-57e7-493b-8756-a335ea61c7c1" config-ref="HTTP_Listener_config" path="/members/transactions/{id}" />
		<salesforce:query-all doc:name="Query Transactions by Member Id" doc:id="0d6c6124-645a-4c58-aa40-4e11f0c69dc6" config-ref="Salesforce_Config" >
			<salesforce:salesforce-query ><![CDATA[SELECT MemberId, LoyaltyProgramId, LoyaltyProgram.Name, JournalTypeId, JournalType.Name, JournalSubTypeId, JournalSubType.Name, JournalReason, JournalDate, EscrowPointsCreditDate, Channel, Comment,
ProductId , Product.Name, ProductCategoryId , ProductCategory.Name, Brand, Points_to_Redeem__c , PaymentMethod , ActivityDate, Status, Reward_Catalog__c, Quantity, QuantityUnitOfMeasureId, Establishment
FROM TransactionJournal 
WHERE MemberId = ':id']]></salesforce:salesforce-query>
			<salesforce:parameters ><![CDATA[#[output application/java
---
{
	"id" : attributes.uriParams.id
}]]]></salesforce:parameters>
		</salesforce:query-all>
		<ee:transform doc:name="Transform Message" doc:id="fc6c8cae-760f-4633-b534-427bbba48ed0" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<sub-flow name="get-member-vouchers" doc:id="3c8af250-911c-4689-8c42-f3984bad3c8d" >
		<logger level="INFO" doc:name="Logger" doc:id="e0bac101-4385-456c-8a5d-3081a4311572" message="Getting vouchers for #[vars.member]" />
		<db:select doc:name="Select" doc:id="552088b2-8e4b-4395-aa8c-4355e34f5544" config-ref="Database_Config">
			<db:sql><![CDATA[select sf_id
from customers
where id = :id]]></db:sql>
			<db:input-parameters><![CDATA[#[{
	id: vars.member
}]]]></db:input-parameters>
		</db:select>
		<set-variable value="#[payload[0].sf_id]" doc:name="Set sf_member_id" doc:id="c61115d8-0267-4e71-a702-6d87bd4f854a" variableName="sf_member_id" />
		<salesforce:query-all doc:name="Get Vouchers By Member" doc:id="427f6144-b696-40fa-a5ba-f27f3b39fc05" config-ref="Salesforce_Config">
			<salesforce:salesforce-query><![CDATA[select Id, Name, IsDeleted, CreatedDate, ExpirationDate ,LastModifiedDate, 
DiscountPercent, PromotionId, Reason, RedeemedValue, RemainingValue, ReservationKey, ReservedValue,LoyaltyProgramMemberId,
Status, TransactionJournalId, UseDate, VoucherCode,
VoucherDefinition.id, VoucherDefinition.isActive,
VoucherDefinition.AutogeneratedCodeLength, VoucherDefinition.CodePrefix, VoucherDefinition.CodeSuffix,
VoucherDefinition.Description, VoucherDefinition.DiscountPercent, VoucherDefinition.EffectiveDate, VoucherDefinition.ExpirationDate,
VoucherDefinition.FaceValue, VoucherDefinition.ImageUrl, VoucherDefinition.Name, VoucherDefinition.ProductId, VoucherDefinition.Type
from Voucher
where LoyaltyProgramMemberId = ':id']]></salesforce:salesforce-query>
			<salesforce:parameters><![CDATA[#[{
	id: vars.sf_member_id
}]]]></salesforce:parameters>
		</salesforce:query-all>
		<logger level="INFO" doc:name="Logger1" doc:id="daa3219b-160f-492a-af92-fdd394949c3c" message="Getting vouchers for CustomerID:#[vars.member] - #[attributes.queryParams.member] with SF ID: #[vars.sf_member_id]" />
		<ee:transform doc:name="Transform Message" doc:id="d04d9b97-bd33-41bd-8a47-c3f680944fbd">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java

// Helper function to convert string boolean to actual boolean
fun toBoolean(value) = 
    if (value == "true") true
    else if (value == "false") false
    else null

// Helper function to safely convert to decimal/number
fun toDecimal(value) = 
    if (value == null) null
    else value as Number

---
payload map (voucher) -> {
	customer_id: vars.member,
    // Salesforce ID mapping
    sf_id: voucher.Id,
    
    // Customer ID - will be resolved in SQL from LoyaltyProgramMemberId
    loyalty_program_member_id: voucher.LoyaltyProgramMemberId,
    
    // Voucher basic info
    voucher_code: voucher.VoucherCode,
    name: voucher.Name,
    status: voucher.Status default "Issued",
    
    // Voucher type and values from VoucherDefinition
    voucher_type: if (voucher.VoucherDefinition.Type == "ProductOrService") 
                    "ProductSpecific"
                  else if (voucher.VoucherDefinition.FaceValue != null)
                    "Value"
                  else if (voucher.VoucherDefinition.DiscountPercent != null)
                    "Discount"
                  else "Value",
    
    face_value: toDecimal(voucher.VoucherDefinition.FaceValue),
    discount_percent: toDecimal(voucher.VoucherDefinition.DiscountPercent),
    
    // Product ID - will be resolved in SQL from VoucherDefinition.ProductId
    sf_product_id: voucher.VoucherDefinition.ProductId,
    
    // Value tracking
    remaining_value: toDecimal(voucher.RemainingValue),
    redeemed_value: toDecimal(voucher.RedeemedValue) default 0,
    reserved_value: toDecimal(voucher.ReservedValue) default 0,
    
    // Dates
    created_date: if (!isEmpty(voucher.CreatedDate)) voucher.CreatedDate as String { format: "yyyy-MM-dd'T'HH:mm:ss" } as LocalDateTime else null ,
    expiration_date: voucher.ExpirationDate as Date,
    use_date: if (!isEmpty(voucher.UseDate)) voucher.UseDate as String { format: "yyyy-MM-dd'T'HH:mm:ss" } as LocalDateTime else null,
    
    // Metadata from VoucherDefinition
    description: voucher.VoucherDefinition.Description,
    image_url: voucher.VoucherDefinition.ImageUrl,
    is_active: toBoolean(voucher.VoucherDefinition.IsActive) default true,
    effective_date: voucher.VoucherDefinition.EffectiveDate as Date

}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable value="#[payload]" doc:name="Set Member Vouchers" doc:id="efe628ef-95ea-4ca8-8211-9db9b45fca94" variableName="vouchers" />
		<set-variable value="#[[] as Array]" doc:name="Init Response" doc:id="91818a3b-0852-4e33-9785-60d18d3bfb4a" variableName="response" />
		<foreach doc:name="For Each" doc:id="374990cb-b092-465c-b7c6-bcb695a33dca">
			<set-variable value="#[payload]" doc:name="Set Variable" doc:id="fb1e5b94-7ac7-448b-ac37-bb998d598557" variableName="voucher" />
			<db:insert doc:name="Upsert Vouchers for the member" doc:id="789ec602-85f8-4a8e-a7f4-1629823ebfa2" config-ref="Database_Config" autoGenerateKeys="true">
				<db:sql><![CDATA[INSERT INTO customer_vouchers (
    sf_id,
    customer_id,
    voucher_code,
    name,
    status,
    voucher_type,
    face_value,
    discount_percent,
    product_id,
    remaining_value,
    redeemed_value,
    reserved_value,
    created_date,
    expiration_date,
    use_date,
    description,
    image_url,
    is_active,
    effective_date,
    created_at
)
VALUES (
    :sf_id,
    :customer_id,
    :voucher_code,
    :name,
    :status,
    :voucher_type,
    :face_value,
    :discount_percent,
    (SELECT id FROM products WHERE sf_id = :sf_product_id),
    :remaining_value,
    :redeemed_value,
    :reserved_value,
    :created_date,
    :expiration_date,
    :use_date,
    :description,
    :image_url,
    :is_active,
    :effective_date,
    CURRENT_TIMESTAMP
)
ON CONFLICT (sf_id)
DO UPDATE SET
    customer_id = EXCLUDED.customer_id,
    voucher_code = EXCLUDED.voucher_code,
    name = EXCLUDED.name,
    status = EXCLUDED.status,
    voucher_type = EXCLUDED.voucher_type,
    face_value = EXCLUDED.face_value,
    discount_percent = EXCLUDED.discount_percent,
    product_id = (SELECT id FROM products WHERE sf_id = :sf_product_id),
    remaining_value = EXCLUDED.remaining_value,
    redeemed_value = EXCLUDED.redeemed_value,
    reserved_value = EXCLUDED.reserved_value,
    created_date = EXCLUDED.created_date,
    expiration_date = EXCLUDED.expiration_date,
    use_date = EXCLUDED.use_date,
    description = EXCLUDED.description,
    image_url = EXCLUDED.image_url,
    is_active = EXCLUDED.is_active,
    effective_date = EXCLUDED.effective_date,
    updated_at = CURRENT_TIMESTAMP
WHERE customer_vouchers.updated_at < EXCLUDED.updated_at
RETURNING id]]></db:sql>
				<db:input-parameters><![CDATA[#[payload]]]></db:input-parameters>
			</db:insert>
			<logger level="INFO" doc:name="Logger" doc:id="3392dddf-9b52-4d93-a1a2-c638b03780c5" message="#[output application/json&#10;---&#10;payload]" />
			<choice doc:name="Choice" doc:id="5bdeee90-3b43-4087-ac07-9423c03ab168">
				<when expression="#[isEmpty(payload.generatedKeys)]">
					<db:query-single doc:name="Query single" doc:id="e0dba2b3-ab37-4388-8917-0d51d2423fa5" config-ref="Database_Config">
						<db:sql><![CDATA[select id
from customer_vouchers
where sf_id = :sf_id]]></db:sql>
						<db:input-parameters><![CDATA[#[{
	sf_id: vars.voucher.sf_id
}]]]></db:input-parameters>
					</db:query-single>
					<set-variable value="#[payload.id]" doc:name="Set Variable" doc:id="baed0c8b-7390-4a87-b6b5-11ad89b501d9" variableName="id" />
				</when>
				<otherwise>
					<set-variable value="#[payload.generatedKeys]" doc:name="Set Variable" doc:id="70567ec9-0963-45c7-9ac5-3169575db17c" variableName="id" />
				</otherwise>
			</choice>
			<set-variable value="#[vars.response &lt;&lt; (vars.voucher ++ {id: vars.id})]" doc:name="Add Response" doc:id="0093b548-3e9f-4f0a-bd6a-678a3503af83" variableName="response" />
		</foreach>
		<logger level="INFO" doc:name="Logger" doc:id="4498ee76-9bf3-47be-812e-9ae4a5440824" message="#[vars.response]" />
	</sub-flow>
	<flow name="loyalty-get-member-vouchers" doc:id="c300c99a-1dab-4477-abbf-8e3fbb6fb621">
		<http:listener doc:name="Listener" doc:id="399fb43a-9fce-4f26-964c-bf73e2b5b967" config-ref="HTTP_Listener_config" path="/members/vouchers" allowedMethods="GET"/>
		<set-variable value="#[attributes.queryParams.member as Number]" doc:name="Set member" doc:id="fe051d97-457c-49aa-b284-b85f766c08e8" variableName="member"/>
		<flow-ref doc:name="Get Member Vouchers" doc:id="ab1ee291-6e50-4c5c-968e-63b106ea36ca" name="get-member-vouchers"/>
		<ee:transform doc:name="Transform Message" doc:id="0d9a315c-9809-4efc-ad53-33492620eb4a" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.response]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
